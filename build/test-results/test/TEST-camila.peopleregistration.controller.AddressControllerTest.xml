<?xml version="1.0" encoding="UTF-8"?>
<testsuite name="camila.peopleregistration.controller.AddressControllerTest" tests="8" skipped="0" failures="0" errors="0" timestamp="2023-04-05T13:03:27" hostname="forttiori-Lenovo-ideapad-320-15IKB" time="3.844">
  <properties/>
  <testcase name="Deve retornar erro 404 quando tentar atualizar com um id de pessoa inexistente" classname="camila.peopleregistration.controller.AddressControllerTest" time="1.035"/>
  <testcase name="Deve retornar erro ConstraintViolationException quando passar um cep inválido no cadastro" classname="camila.peopleregistration.controller.AddressControllerTest" time="1.343"/>
  <testcase name="Deve criar um novo endereço quando passar um id de pessoa existente" classname="camila.peopleregistration.controller.AddressControllerTest" time="0.606"/>
  <testcase name="Deve retornar erro 404 quando buscar por id de pessoa inexistente" classname="camila.peopleregistration.controller.AddressControllerTest" time="0.067"/>
  <testcase name="Deve atualizar um endereço quando passar um id de pessoa existente" classname="camila.peopleregistration.controller.AddressControllerTest" time="0.545"/>
  <testcase name="Deve deletar um endereço quando passar um id de pessoa existente" classname="camila.peopleregistration.controller.AddressControllerTest" time="0.045"/>
  <testcase name="Deve retornar erro 404 quando tentar deletar com um id de pessoa inexistente" classname="camila.peopleregistration.controller.AddressControllerTest" time="0.108"/>
  <testcase name="Deve retornar uma lista de endereços quando buscar por id de pessoa existente" classname="camila.peopleregistration.controller.AddressControllerTest" time="0.072"/>
  <system-out><![CDATA[2023-04-05 10:03:23.965  INFO 8201 --- [    Test worker] .b.t.c.SpringBootTestContextBootstrapper : Neither @ContextConfiguration nor @ContextHierarchy found for test class [camila.peopleregistration.controller.AddressControllerTest], using SpringBootContextLoader
2023-04-05 10:03:23.966  INFO 8201 --- [    Test worker] o.s.t.c.support.AbstractContextLoader    : Could not detect default resource locations for test class [camila.peopleregistration.controller.AddressControllerTest]: no resource found for suffixes {-context.xml, Context.groovy}.
2023-04-05 10:03:23.968  INFO 8201 --- [    Test worker] t.c.s.AnnotationConfigContextLoaderUtils : Could not detect default configuration classes for test class [camila.peopleregistration.controller.AddressControllerTest]: AddressControllerTest does not declare any static, non-private, non-final, nested classes annotated with @Configuration.
2023-04-05 10:03:23.986  INFO 8201 --- [    Test worker] .b.t.c.SpringBootTestContextBootstrapper : Found @SpringBootConfiguration camila.peopleregistration.PeopleRegistrationApplication for test class camila.peopleregistration.controller.AddressControllerTest
2023-04-05 10:03:23.989  INFO 8201 --- [    Test worker] .b.t.c.SpringBootTestContextBootstrapper : Loaded default TestExecutionListener class names from location [META-INF/spring.factories]: [org.springframework.boot.test.autoconfigure.restdocs.RestDocsTestExecutionListener, org.springframework.boot.test.autoconfigure.web.client.MockRestServiceServerResetTestExecutionListener, org.springframework.boot.test.autoconfigure.web.servlet.MockMvcPrintOnlyOnFailureTestExecutionListener, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverTestExecutionListener, org.springframework.boot.test.autoconfigure.webservices.client.MockWebServiceServerTestExecutionListener, org.springframework.boot.test.mock.mockito.MockitoTestExecutionListener, org.springframework.boot.test.mock.mockito.ResetMocksTestExecutionListener, org.springframework.test.context.web.ServletTestExecutionListener, org.springframework.test.context.support.DirtiesContextBeforeModesTestExecutionListener, org.springframework.test.context.event.ApplicationEventsTestExecutionListener, org.springframework.test.context.support.DependencyInjectionTestExecutionListener, org.springframework.test.context.support.DirtiesContextTestExecutionListener, org.springframework.test.context.transaction.TransactionalTestExecutionListener, org.springframework.test.context.jdbc.SqlScriptsTestExecutionListener, org.springframework.test.context.event.EventPublishingTestExecutionListener]
2023-04-05 10:03:23.990  INFO 8201 --- [    Test worker] .b.t.c.SpringBootTestContextBootstrapper : Using TestExecutionListeners: [org.springframework.test.context.web.ServletTestExecutionListener@c4b476c, org.springframework.test.context.support.DirtiesContextBeforeModesTestExecutionListener@7d20558e, org.springframework.test.context.event.ApplicationEventsTestExecutionListener@5955544c, org.springframework.boot.test.mock.mockito.MockitoTestExecutionListener@403adc49, org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener@161c8305, org.springframework.test.context.support.DirtiesContextTestExecutionListener@696f286d, org.springframework.test.context.transaction.TransactionalTestExecutionListener@1aebf638, org.springframework.test.context.jdbc.SqlScriptsTestExecutionListener@ca5a9b8, org.springframework.test.context.event.EventPublishingTestExecutionListener@7e530782, org.springframework.boot.test.autoconfigure.restdocs.RestDocsTestExecutionListener@6eef7465, org.springframework.boot.test.autoconfigure.web.client.MockRestServiceServerResetTestExecutionListener@2b7015b6, org.springframework.boot.test.autoconfigure.web.servlet.MockMvcPrintOnlyOnFailureTestExecutionListener@ab98109, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverTestExecutionListener@6cb0e8cb, org.springframework.boot.test.autoconfigure.webservices.client.MockWebServiceServerTestExecutionListener@79e9e564, org.springframework.boot.test.mock.mockito.ResetMocksTestExecutionListener@521f824a]

  .   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  '  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/
 :: Spring Boot ::                (v2.5.6)

2023-04-05 10:03:24.028  INFO 8201 --- [    Test worker] c.p.controller.AddressControllerTest     : Starting AddressControllerTest using Java 17.0.2 on forttiori-Lenovo-ideapad-320-15IKB with PID 8201 (started by forttiori in /home/forttiori/Documentos/people-registration)
2023-04-05 10:03:24.030  INFO 8201 --- [    Test worker] c.p.controller.AddressControllerTest     : No active profile set, falling back to default profiles: default
2023-04-05 10:03:24.577  INFO 8201 --- [    Test worker] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2023-04-05 10:03:24.595  INFO 8201 --- [    Test worker] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 18 ms. Found 2 JPA repository interfaces.
2023-04-05 10:03:24.752  INFO 8201 --- [    Test worker] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.ws.config.annotation.DelegatingWsConfiguration' of type [org.springframework.ws.config.annotation.DelegatingWsConfiguration$$EnhancerBySpringCGLIB$$b5a92eff] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-05 10:03:24.762  INFO 8201 --- [    Test worker] .w.s.a.s.AnnotationActionEndpointMapping : Supporting [WS-Addressing August 2004, WS-Addressing 1.0]
2023-04-05 10:03:24.895  INFO 8201 --- [    Test worker] com.zaxxer.hikari.HikariDataSource       : HikariPool-3 - Starting...
2023-04-05 10:03:24.898  INFO 8201 --- [    Test worker] com.zaxxer.hikari.HikariDataSource       : HikariPool-3 - Start completed.
2023-04-05 10:03:24.915  INFO 8201 --- [    Test worker] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2023-04-05 10:03:24.924  INFO 8201 --- [    Test worker] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.H2Dialect
Hibernate: drop table if exists address_entity CASCADE 
Hibernate: drop table if exists person_entity CASCADE 
Hibernate: create table address_entity (id bigint generated by default as identity, cep varchar(10) not null, city varchar(100) not null, main_address boolean not null, neighborhood varchar(100) not null, number varchar(10) not null, street varchar(100) not null, uf varchar(2) not null, person_entity_id bigint, primary key (id))
Hibernate: create table person_entity (id bigint generated by default as identity, birthdate timestamp not null, name varchar(100) not null, status varchar(10) not null, primary key (id))
Hibernate: alter table address_entity add constraint FK9spv5h8yg5r7fuukb5ifca1nq foreign key (person_entity_id) references person_entity
2023-04-05 10:03:25.087  INFO 8201 --- [    Test worker] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2023-04-05 10:03:25.088  INFO 8201 --- [    Test worker] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2023-04-05 10:03:25.528  WARN 8201 --- [    Test worker] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2023-04-05 10:03:25.941  INFO 8201 --- [    Test worker] o.s.b.a.e.web.EndpointLinksResolver      : Exposing 13 endpoint(s) beneath base path '/actuator'
2023-04-05 10:03:26.500  WARN 8201 --- [    Test worker] o.s.b.a.m.MustacheAutoConfiguration      : Cannot find template location: classpath:/templates/ (please add some templates, check your Mustache configuration, or set spring.mustache.check-template-location=false)
2023-04-05 10:03:26.911  INFO 8201 --- [    Test worker] o.s.b.t.m.w.SpringBootMockServletContext : Initializing Spring TestDispatcherServlet ''
2023-04-05 10:03:26.911  INFO 8201 --- [    Test worker] o.s.t.web.servlet.TestDispatcherServlet  : Initializing Servlet ''
2023-04-05 10:03:26.914  INFO 8201 --- [    Test worker] o.s.t.web.servlet.TestDispatcherServlet  : Completed initialization in 3 ms
2023-04-05 10:03:27.406  INFO 8201 --- [    Test worker] c.p.controller.AddressControllerTest     : Started AddressControllerTest in 3.412 seconds (JVM running for 33.011)
Hibernate: insert into person_entity (id, birthdate, name, status) values (null, ?, ?, ?)
Hibernate: insert into address_entity (id, cep, city, main_address, neighborhood, number, street, uf) values (null, ?, ?, ?, ?, ?, ?, ?)
Hibernate: update address_entity set person_entity_id=? where id=?
Hibernate: insert into address_entity (id, cep, city, main_address, neighborhood, number, street, uf) values (null, ?, ?, ?, ?, ?, ?, ?)
Hibernate: select personenti0_.id as id1_1_0_, personenti0_.birthdate as birthdat2_1_0_, personenti0_.name as name3_1_0_, personenti0_.status as status4_1_0_ from person_entity personenti0_ where personenti0_.id=? and ( personenti0_.status = 'Ativo')

MockHttpServletRequest:
      HTTP Method = PUT
      Request URI = /v1/person/2/address/1
       Parameters = {}
          Headers = [Content-Type:"application/json;charset=UTF-8", Content-Length:"151"]
             Body = {"id":null,"cep":"94020070","number":"10","uf":"RS","mainAddress":true,"logradouro":"Rua João Dutra","bairro":"Salgado Filho","localidade":"Gravatai"}
    Session Attrs = {}

Handler:
             Type = camila.peopleregistration.controller.AddressController
           Method = camila.peopleregistration.controller.AddressController#updateAddress(Long, AddressEntity, Long)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = camila.peopleregistration.configuration.exception.NotFoundException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = [Content-Type:"application/json"]
     Content type = application/json
             Body = {"message":"Person not found","field":"NOT_FOUND","parameter":"NotFoundException","timestamp":"2023-04-05T10:03:27"}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
Hibernate: select personenti0_.id as id1_1_, personenti0_.birthdate as birthdat2_1_, personenti0_.name as name3_1_, personenti0_.status as status4_1_ from person_entity personenti0_ where ( personenti0_.status = 'Ativo')
Hibernate: select addresses0_.person_entity_id as person_e9_0_0_, addresses0_.id as id1_0_0_, addresses0_.id as id1_0_1_, addresses0_.cep as cep2_0_1_, addresses0_.city as city3_0_1_, addresses0_.main_address as main_add4_0_1_, addresses0_.neighborhood as neighbor5_0_1_, addresses0_.number as number6_0_1_, addresses0_.street as street7_0_1_, addresses0_.uf as uf8_0_1_ from address_entity addresses0_ where addresses0_.person_entity_id=?
Hibernate: update address_entity set person_entity_id=null where person_entity_id=?
Hibernate: delete from address_entity where id=?
Hibernate: UPDATE PERSON_ENTITY SET status = 'Inativo' WHERE id = ?
Hibernate: select addressent0_.id as id1_0_, addressent0_.cep as cep2_0_, addressent0_.city as city3_0_, addressent0_.main_address as main_add4_0_, addressent0_.neighborhood as neighbor5_0_, addressent0_.number as number6_0_, addressent0_.street as street7_0_, addressent0_.uf as uf8_0_ from address_entity addressent0_
Hibernate: delete from address_entity where id=?
Hibernate: insert into person_entity (id, birthdate, name, status) values (null, ?, ?, ?)
Hibernate: insert into address_entity (id, cep, city, main_address, neighborhood, number, street, uf) values (null, ?, ?, ?, ?, ?, ?, ?)
Hibernate: update address_entity set person_entity_id=? where id=?
Hibernate: insert into address_entity (id, cep, city, main_address, neighborhood, number, street, uf) values (null, ?, ?, ?, ?, ?, ?, ?)
Hibernate: select personenti0_.id as id1_1_, personenti0_.birthdate as birthdat2_1_, personenti0_.name as name3_1_, personenti0_.status as status4_1_ from person_entity personenti0_ where ( personenti0_.status = 'Ativo')
Hibernate: select addresses0_.person_entity_id as person_e9_0_0_, addresses0_.id as id1_0_0_, addresses0_.id as id1_0_1_, addresses0_.cep as cep2_0_1_, addresses0_.city as city3_0_1_, addresses0_.main_address as main_add4_0_1_, addresses0_.neighborhood as neighbor5_0_1_, addresses0_.number as number6_0_1_, addresses0_.street as street7_0_1_, addresses0_.uf as uf8_0_1_ from address_entity addresses0_ where addresses0_.person_entity_id=?
Hibernate: select personenti0_.id as id1_1_0_, personenti0_.birthdate as birthdat2_1_0_, personenti0_.name as name3_1_0_, personenti0_.status as status4_1_0_ from person_entity personenti0_ where personenti0_.id=? and ( personenti0_.status = 'Ativo')
Hibernate: select addresses0_.person_entity_id as person_e9_0_0_, addresses0_.id as id1_0_0_, addresses0_.id as id1_0_1_, addresses0_.cep as cep2_0_1_, addresses0_.city as city3_0_1_, addresses0_.main_address as main_add4_0_1_, addresses0_.neighborhood as neighbor5_0_1_, addresses0_.number as number6_0_1_, addresses0_.street as street7_0_1_, addresses0_.uf as uf8_0_1_ from address_entity addresses0_ where addresses0_.person_entity_id=?

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /v1/person/2/address/
       Parameters = {addressId=[3]}
          Headers = [Content-Type:"application/json;charset=UTF-8", Content-Length:"118"]
             Body = {"id":2,"cep":"94020050","number":null,"uf":null,"mainAddress":null,"logradouro":null,"bairro":null,"localidade":null}
    Session Attrs = {}

Handler:
             Type = camila.peopleregistration.controller.AddressController
           Method = camila.peopleregistration.controller.AddressController#createAddress(AddressEntity, Long)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = javax.validation.ConstraintViolationException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 400
    Error message = null
          Headers = [Content-Type:"application/json"]
     Content type = application/json
             Body = {"message":"Missing required fields or invalid data","field":"BAD_REQUEST","parameter":"ConstraintViolationException","timestamp":"2023-04-05T10:03:29"}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
Hibernate: select personenti0_.id as id1_1_, personenti0_.birthdate as birthdat2_1_, personenti0_.name as name3_1_, personenti0_.status as status4_1_ from person_entity personenti0_ where ( personenti0_.status = 'Ativo')
Hibernate: select addresses0_.person_entity_id as person_e9_0_0_, addresses0_.id as id1_0_0_, addresses0_.id as id1_0_1_, addresses0_.cep as cep2_0_1_, addresses0_.city as city3_0_1_, addresses0_.main_address as main_add4_0_1_, addresses0_.neighborhood as neighbor5_0_1_, addresses0_.number as number6_0_1_, addresses0_.street as street7_0_1_, addresses0_.uf as uf8_0_1_ from address_entity addresses0_ where addresses0_.person_entity_id=?
Hibernate: update address_entity set person_entity_id=null where person_entity_id=?
Hibernate: delete from address_entity where id=?
Hibernate: UPDATE PERSON_ENTITY SET status = 'Inativo' WHERE id = ?
Hibernate: select addressent0_.id as id1_0_, addressent0_.cep as cep2_0_, addressent0_.city as city3_0_, addressent0_.main_address as main_add4_0_, addressent0_.neighborhood as neighbor5_0_, addressent0_.number as number6_0_, addressent0_.street as street7_0_, addressent0_.uf as uf8_0_ from address_entity addressent0_
Hibernate: delete from address_entity where id=?
Hibernate: insert into person_entity (id, birthdate, name, status) values (null, ?, ?, ?)
Hibernate: insert into address_entity (id, cep, city, main_address, neighborhood, number, street, uf) values (null, ?, ?, ?, ?, ?, ?, ?)
Hibernate: update address_entity set person_entity_id=? where id=?
Hibernate: insert into address_entity (id, cep, city, main_address, neighborhood, number, street, uf) values (null, ?, ?, ?, ?, ?, ?, ?)
Hibernate: select personenti0_.id as id1_1_, personenti0_.birthdate as birthdat2_1_, personenti0_.name as name3_1_, personenti0_.status as status4_1_ from person_entity personenti0_ where ( personenti0_.status = 'Ativo')
Hibernate: select addresses0_.person_entity_id as person_e9_0_0_, addresses0_.id as id1_0_0_, addresses0_.id as id1_0_1_, addresses0_.cep as cep2_0_1_, addresses0_.city as city3_0_1_, addresses0_.main_address as main_add4_0_1_, addresses0_.neighborhood as neighbor5_0_1_, addresses0_.number as number6_0_1_, addresses0_.street as street7_0_1_, addresses0_.uf as uf8_0_1_ from address_entity addresses0_ where addresses0_.person_entity_id=?
Hibernate: select personenti0_.id as id1_1_0_, personenti0_.birthdate as birthdat2_1_0_, personenti0_.name as name3_1_0_, personenti0_.status as status4_1_0_ from person_entity personenti0_ where personenti0_.id=? and ( personenti0_.status = 'Ativo')
Hibernate: select addresses0_.person_entity_id as person_e9_0_0_, addresses0_.id as id1_0_0_, addresses0_.id as id1_0_1_, addresses0_.cep as cep2_0_1_, addresses0_.city as city3_0_1_, addresses0_.main_address as main_add4_0_1_, addresses0_.neighborhood as neighbor5_0_1_, addresses0_.number as number6_0_1_, addresses0_.street as street7_0_1_, addresses0_.uf as uf8_0_1_ from address_entity addresses0_ where addresses0_.person_entity_id=?
Hibernate: insert into address_entity (id, cep, city, main_address, neighborhood, number, street, uf) values (null, ?, ?, ?, ?, ?, ?, ?)
Hibernate: update address_entity set person_entity_id=? where id=?

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /v1/person/3/address/
       Parameters = {}
          Headers = [Content-Type:"application/json;charset=UTF-8", Content-Length:"151"]
             Body = {"id":null,"cep":"94020070","number":"10","uf":"RS","mainAddress":true,"logradouro":"Rua João Dutra","bairro":"Salgado Filho","localidade":"Gravatai"}
    Session Attrs = {}

Handler:
             Type = camila.peopleregistration.controller.AddressController
           Method = camila.peopleregistration.controller.AddressController#createAddress(AddressEntity, Long)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 201
    Error message = null
          Headers = [Content-Type:"application/json"]
     Content type = application/json
             Body = {"id":7,"cep":"94020-070","number":"10","uf":"RS","mainAddress":true,"logradouro":"Rua JoÃ£o Dutra","bairro":"Salgado Filho","localidade":"GravataÃ­"}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
Hibernate: select personenti0_.id as id1_1_, personenti0_.birthdate as birthdat2_1_, personenti0_.name as name3_1_, personenti0_.status as status4_1_ from person_entity personenti0_ where ( personenti0_.status = 'Ativo')
Hibernate: select addresses0_.person_entity_id as person_e9_0_0_, addresses0_.id as id1_0_0_, addresses0_.id as id1_0_1_, addresses0_.cep as cep2_0_1_, addresses0_.city as city3_0_1_, addresses0_.main_address as main_add4_0_1_, addresses0_.neighborhood as neighbor5_0_1_, addresses0_.number as number6_0_1_, addresses0_.street as street7_0_1_, addresses0_.uf as uf8_0_1_ from address_entity addresses0_ where addresses0_.person_entity_id=?
Hibernate: update address_entity set person_entity_id=null where person_entity_id=?
Hibernate: delete from address_entity where id=?
Hibernate: delete from address_entity where id=?
Hibernate: UPDATE PERSON_ENTITY SET status = 'Inativo' WHERE id = ?
Hibernate: select addressent0_.id as id1_0_, addressent0_.cep as cep2_0_, addressent0_.city as city3_0_, addressent0_.main_address as main_add4_0_, addressent0_.neighborhood as neighbor5_0_, addressent0_.number as number6_0_, addressent0_.street as street7_0_, addressent0_.uf as uf8_0_ from address_entity addressent0_
Hibernate: delete from address_entity where id=?
Hibernate: insert into person_entity (id, birthdate, name, status) values (null, ?, ?, ?)
Hibernate: insert into address_entity (id, cep, city, main_address, neighborhood, number, street, uf) values (null, ?, ?, ?, ?, ?, ?, ?)
Hibernate: update address_entity set person_entity_id=? where id=?
Hibernate: insert into address_entity (id, cep, city, main_address, neighborhood, number, street, uf) values (null, ?, ?, ?, ?, ?, ?, ?)
Hibernate: select personenti0_.id as id1_1_0_, personenti0_.birthdate as birthdat2_1_0_, personenti0_.name as name3_1_0_, personenti0_.status as status4_1_0_ from person_entity personenti0_ where personenti0_.id=? and ( personenti0_.status = 'Ativo')

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /v1/person/2/address/
       Parameters = {addressId=[1]}
          Headers = [Content-Type:"application/json;charset=UTF-8"]
             Body = null
    Session Attrs = {}

Handler:
             Type = camila.peopleregistration.controller.AddressController
           Method = camila.peopleregistration.controller.AddressController#getAddressesByPersonId(Long)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = camila.peopleregistration.configuration.exception.NotFoundException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = [Content-Type:"application/json"]
     Content type = application/json
             Body = {"message":"Person with id 2 not found","field":"NOT_FOUND","parameter":"NotFoundException","timestamp":"2023-04-05T10:03:30"}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
Hibernate: select personenti0_.id as id1_1_, personenti0_.birthdate as birthdat2_1_, personenti0_.name as name3_1_, personenti0_.status as status4_1_ from person_entity personenti0_ where ( personenti0_.status = 'Ativo')
Hibernate: select addresses0_.person_entity_id as person_e9_0_0_, addresses0_.id as id1_0_0_, addresses0_.id as id1_0_1_, addresses0_.cep as cep2_0_1_, addresses0_.city as city3_0_1_, addresses0_.main_address as main_add4_0_1_, addresses0_.neighborhood as neighbor5_0_1_, addresses0_.number as number6_0_1_, addresses0_.street as street7_0_1_, addresses0_.uf as uf8_0_1_ from address_entity addresses0_ where addresses0_.person_entity_id=?
Hibernate: update address_entity set person_entity_id=null where person_entity_id=?
Hibernate: delete from address_entity where id=?
Hibernate: UPDATE PERSON_ENTITY SET status = 'Inativo' WHERE id = ?
Hibernate: select addressent0_.id as id1_0_, addressent0_.cep as cep2_0_, addressent0_.city as city3_0_, addressent0_.main_address as main_add4_0_, addressent0_.neighborhood as neighbor5_0_, addressent0_.number as number6_0_, addressent0_.street as street7_0_, addressent0_.uf as uf8_0_ from address_entity addressent0_
Hibernate: delete from address_entity where id=?
Hibernate: insert into person_entity (id, birthdate, name, status) values (null, ?, ?, ?)
Hibernate: insert into address_entity (id, cep, city, main_address, neighborhood, number, street, uf) values (null, ?, ?, ?, ?, ?, ?, ?)
Hibernate: update address_entity set person_entity_id=? where id=?
Hibernate: insert into address_entity (id, cep, city, main_address, neighborhood, number, street, uf) values (null, ?, ?, ?, ?, ?, ?, ?)
Hibernate: select personenti0_.id as id1_1_, personenti0_.birthdate as birthdat2_1_, personenti0_.name as name3_1_, personenti0_.status as status4_1_ from person_entity personenti0_ where ( personenti0_.status = 'Ativo')
Hibernate: select addresses0_.person_entity_id as person_e9_0_0_, addresses0_.id as id1_0_0_, addresses0_.id as id1_0_1_, addresses0_.cep as cep2_0_1_, addresses0_.city as city3_0_1_, addresses0_.main_address as main_add4_0_1_, addresses0_.neighborhood as neighbor5_0_1_, addresses0_.number as number6_0_1_, addresses0_.street as street7_0_1_, addresses0_.uf as uf8_0_1_ from address_entity addresses0_ where addresses0_.person_entity_id=?
Hibernate: select personenti0_.id as id1_1_0_, personenti0_.birthdate as birthdat2_1_0_, personenti0_.name as name3_1_0_, personenti0_.status as status4_1_0_ from person_entity personenti0_ where personenti0_.id=? and ( personenti0_.status = 'Ativo')
Hibernate: select addresses0_.person_entity_id as person_e9_0_0_, addresses0_.id as id1_0_0_, addresses0_.id as id1_0_1_, addresses0_.cep as cep2_0_1_, addresses0_.city as city3_0_1_, addresses0_.main_address as main_add4_0_1_, addresses0_.neighborhood as neighbor5_0_1_, addresses0_.number as number6_0_1_, addresses0_.street as street7_0_1_, addresses0_.uf as uf8_0_1_ from address_entity addresses0_ where addresses0_.person_entity_id=?
Hibernate: update address_entity set cep=?, city=?, main_address=?, neighborhood=?, number=?, street=?, uf=? where id=?

MockHttpServletRequest:
      HTTP Method = PUT
      Request URI = /v1/person/5/address/10
       Parameters = {}
          Headers = [Content-Type:"application/json;charset=UTF-8", Content-Length:"151"]
             Body = {"id":null,"cep":"94020070","number":"10","uf":"RS","mainAddress":true,"logradouro":"Rua João Dutra","bairro":"Salgado Filho","localidade":"Gravatai"}
    Session Attrs = {}

Handler:
             Type = camila.peopleregistration.controller.AddressController
           Method = camila.peopleregistration.controller.AddressController#updateAddress(Long, AddressEntity, Long)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 201
    Error message = null
          Headers = [Content-Type:"application/json"]
     Content type = application/json
             Body = {"id":10,"cep":"94020-070","number":"10","uf":"RS","mainAddress":true,"logradouro":"Rua JoÃ£o Dutra","bairro":"Salgado Filho","localidade":"GravataÃ­"}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
Hibernate: select personenti0_.id as id1_1_, personenti0_.birthdate as birthdat2_1_, personenti0_.name as name3_1_, personenti0_.status as status4_1_ from person_entity personenti0_ where ( personenti0_.status = 'Ativo')
Hibernate: select addresses0_.person_entity_id as person_e9_0_0_, addresses0_.id as id1_0_0_, addresses0_.id as id1_0_1_, addresses0_.cep as cep2_0_1_, addresses0_.city as city3_0_1_, addresses0_.main_address as main_add4_0_1_, addresses0_.neighborhood as neighbor5_0_1_, addresses0_.number as number6_0_1_, addresses0_.street as street7_0_1_, addresses0_.uf as uf8_0_1_ from address_entity addresses0_ where addresses0_.person_entity_id=?
Hibernate: update address_entity set person_entity_id=null where person_entity_id=?
Hibernate: delete from address_entity where id=?
Hibernate: UPDATE PERSON_ENTITY SET status = 'Inativo' WHERE id = ?
Hibernate: select addressent0_.id as id1_0_, addressent0_.cep as cep2_0_, addressent0_.city as city3_0_, addressent0_.main_address as main_add4_0_, addressent0_.neighborhood as neighbor5_0_, addressent0_.number as number6_0_, addressent0_.street as street7_0_, addressent0_.uf as uf8_0_ from address_entity addressent0_
Hibernate: delete from address_entity where id=?
Hibernate: insert into person_entity (id, birthdate, name, status) values (null, ?, ?, ?)
Hibernate: insert into address_entity (id, cep, city, main_address, neighborhood, number, street, uf) values (null, ?, ?, ?, ?, ?, ?, ?)
Hibernate: update address_entity set person_entity_id=? where id=?
Hibernate: insert into address_entity (id, cep, city, main_address, neighborhood, number, street, uf) values (null, ?, ?, ?, ?, ?, ?, ?)
Hibernate: select personenti0_.id as id1_1_, personenti0_.birthdate as birthdat2_1_, personenti0_.name as name3_1_, personenti0_.status as status4_1_ from person_entity personenti0_ where ( personenti0_.status = 'Ativo')
Hibernate: select addresses0_.person_entity_id as person_e9_0_0_, addresses0_.id as id1_0_0_, addresses0_.id as id1_0_1_, addresses0_.cep as cep2_0_1_, addresses0_.city as city3_0_1_, addresses0_.main_address as main_add4_0_1_, addresses0_.neighborhood as neighbor5_0_1_, addresses0_.number as number6_0_1_, addresses0_.street as street7_0_1_, addresses0_.uf as uf8_0_1_ from address_entity addresses0_ where addresses0_.person_entity_id=?
Hibernate: select addressent0_.id as id1_0_0_, addressent0_.cep as cep2_0_0_, addressent0_.city as city3_0_0_, addressent0_.main_address as main_add4_0_0_, addressent0_.neighborhood as neighbor5_0_0_, addressent0_.number as number6_0_0_, addressent0_.street as street7_0_0_, addressent0_.uf as uf8_0_0_ from address_entity addressent0_ where addressent0_.id=?
Hibernate: delete from address_entity where id=?

MockHttpServletRequest:
      HTTP Method = DELETE
      Request URI = /v1/person/6/address/12
       Parameters = {}
          Headers = [Content-Type:"application/json;charset=UTF-8"]
             Body = null
    Session Attrs = {}

Handler:
             Type = camila.peopleregistration.controller.AddressController
           Method = camila.peopleregistration.controller.AddressController#deleteAddress(Long, Long)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 204
    Error message = null
          Headers = []
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
Hibernate: select personenti0_.id as id1_1_, personenti0_.birthdate as birthdat2_1_, personenti0_.name as name3_1_, personenti0_.status as status4_1_ from person_entity personenti0_ where ( personenti0_.status = 'Ativo')
Hibernate: select addresses0_.person_entity_id as person_e9_0_0_, addresses0_.id as id1_0_0_, addresses0_.id as id1_0_1_, addresses0_.cep as cep2_0_1_, addresses0_.city as city3_0_1_, addresses0_.main_address as main_add4_0_1_, addresses0_.neighborhood as neighbor5_0_1_, addresses0_.number as number6_0_1_, addresses0_.street as street7_0_1_, addresses0_.uf as uf8_0_1_ from address_entity addresses0_ where addresses0_.person_entity_id=?
Hibernate: UPDATE PERSON_ENTITY SET status = 'Inativo' WHERE id = ?
Hibernate: select addressent0_.id as id1_0_, addressent0_.cep as cep2_0_, addressent0_.city as city3_0_, addressent0_.main_address as main_add4_0_, addressent0_.neighborhood as neighbor5_0_, addressent0_.number as number6_0_, addressent0_.street as street7_0_, addressent0_.uf as uf8_0_ from address_entity addressent0_
Hibernate: delete from address_entity where id=?
Hibernate: insert into person_entity (id, birthdate, name, status) values (null, ?, ?, ?)
Hibernate: insert into address_entity (id, cep, city, main_address, neighborhood, number, street, uf) values (null, ?, ?, ?, ?, ?, ?, ?)
Hibernate: update address_entity set person_entity_id=? where id=?
Hibernate: insert into address_entity (id, cep, city, main_address, neighborhood, number, street, uf) values (null, ?, ?, ?, ?, ?, ?, ?)
Hibernate: select addressent0_.id as id1_0_0_, addressent0_.cep as cep2_0_0_, addressent0_.city as city3_0_0_, addressent0_.main_address as main_add4_0_0_, addressent0_.neighborhood as neighbor5_0_0_, addressent0_.number as number6_0_0_, addressent0_.street as street7_0_0_, addressent0_.uf as uf8_0_0_ from address_entity addressent0_ where addressent0_.id=?

MockHttpServletRequest:
      HTTP Method = DELETE
      Request URI = /v1/person/7/address/12
       Parameters = {}
          Headers = [Content-Type:"application/json;charset=UTF-8"]
             Body = null
    Session Attrs = {}

Handler:
             Type = camila.peopleregistration.controller.AddressController
           Method = camila.peopleregistration.controller.AddressController#deleteAddress(Long, Long)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = camila.peopleregistration.configuration.exception.NotFoundException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = [Content-Type:"application/json"]
     Content type = application/json
             Body = {"message":"Address with ID 12 not found for person with ID 7","field":"NOT_FOUND","parameter":"NotFoundException","timestamp":"2023-04-05T10:03:31"}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
Hibernate: select personenti0_.id as id1_1_, personenti0_.birthdate as birthdat2_1_, personenti0_.name as name3_1_, personenti0_.status as status4_1_ from person_entity personenti0_ where ( personenti0_.status = 'Ativo')
Hibernate: select addresses0_.person_entity_id as person_e9_0_0_, addresses0_.id as id1_0_0_, addresses0_.id as id1_0_1_, addresses0_.cep as cep2_0_1_, addresses0_.city as city3_0_1_, addresses0_.main_address as main_add4_0_1_, addresses0_.neighborhood as neighbor5_0_1_, addresses0_.number as number6_0_1_, addresses0_.street as street7_0_1_, addresses0_.uf as uf8_0_1_ from address_entity addresses0_ where addresses0_.person_entity_id=?
Hibernate: update address_entity set person_entity_id=null where person_entity_id=?
Hibernate: delete from address_entity where id=?
Hibernate: UPDATE PERSON_ENTITY SET status = 'Inativo' WHERE id = ?
Hibernate: select addressent0_.id as id1_0_, addressent0_.cep as cep2_0_, addressent0_.city as city3_0_, addressent0_.main_address as main_add4_0_, addressent0_.neighborhood as neighbor5_0_, addressent0_.number as number6_0_, addressent0_.street as street7_0_, addressent0_.uf as uf8_0_ from address_entity addressent0_
Hibernate: delete from address_entity where id=?
Hibernate: insert into person_entity (id, birthdate, name, status) values (null, ?, ?, ?)
Hibernate: insert into address_entity (id, cep, city, main_address, neighborhood, number, street, uf) values (null, ?, ?, ?, ?, ?, ?, ?)
Hibernate: update address_entity set person_entity_id=? where id=?
Hibernate: insert into address_entity (id, cep, city, main_address, neighborhood, number, street, uf) values (null, ?, ?, ?, ?, ?, ?, ?)
Hibernate: select personenti0_.id as id1_1_, personenti0_.birthdate as birthdat2_1_, personenti0_.name as name3_1_, personenti0_.status as status4_1_ from person_entity personenti0_ where ( personenti0_.status = 'Ativo')
Hibernate: select addresses0_.person_entity_id as person_e9_0_0_, addresses0_.id as id1_0_0_, addresses0_.id as id1_0_1_, addresses0_.cep as cep2_0_1_, addresses0_.city as city3_0_1_, addresses0_.main_address as main_add4_0_1_, addresses0_.neighborhood as neighbor5_0_1_, addresses0_.number as number6_0_1_, addresses0_.street as street7_0_1_, addresses0_.uf as uf8_0_1_ from address_entity addresses0_ where addresses0_.person_entity_id=?
Hibernate: select personenti0_.id as id1_1_0_, personenti0_.birthdate as birthdat2_1_0_, personenti0_.name as name3_1_0_, personenti0_.status as status4_1_0_ from person_entity personenti0_ where personenti0_.id=? and ( personenti0_.status = 'Ativo')
Hibernate: select addresses0_.person_entity_id as person_e9_0_0_, addresses0_.id as id1_0_0_, addresses0_.id as id1_0_1_, addresses0_.cep as cep2_0_1_, addresses0_.city as city3_0_1_, addresses0_.main_address as main_add4_0_1_, addresses0_.neighborhood as neighbor5_0_1_, addresses0_.number as number6_0_1_, addresses0_.street as street7_0_1_, addresses0_.uf as uf8_0_1_ from address_entity addresses0_ where addresses0_.person_entity_id=?

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /v1/person/8/address/
       Parameters = {}
          Headers = [Content-Type:"application/json;charset=UTF-8"]
             Body = null
    Session Attrs = {}

Handler:
             Type = camila.peopleregistration.controller.AddressController
           Method = camila.peopleregistration.controller.AddressController#getAddressesByPersonId(Long)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 200
    Error message = null
          Headers = [Content-Type:"application/json"]
     Content type = application/json
             Body = [{"id":16,"cep":"94020070","number":"10","uf":"RS","mainAddress":true,"logradouro":"Rua JoÃ£o Dutra","bairro":"Salgado Filho","localidade":"Gravatai"}]
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
Hibernate: select personenti0_.id as id1_1_, personenti0_.birthdate as birthdat2_1_, personenti0_.name as name3_1_, personenti0_.status as status4_1_ from person_entity personenti0_ where ( personenti0_.status = 'Ativo')
Hibernate: select addresses0_.person_entity_id as person_e9_0_0_, addresses0_.id as id1_0_0_, addresses0_.id as id1_0_1_, addresses0_.cep as cep2_0_1_, addresses0_.city as city3_0_1_, addresses0_.main_address as main_add4_0_1_, addresses0_.neighborhood as neighbor5_0_1_, addresses0_.number as number6_0_1_, addresses0_.street as street7_0_1_, addresses0_.uf as uf8_0_1_ from address_entity addresses0_ where addresses0_.person_entity_id=?
Hibernate: update address_entity set person_entity_id=null where person_entity_id=?
Hibernate: delete from address_entity where id=?
Hibernate: UPDATE PERSON_ENTITY SET status = 'Inativo' WHERE id = ?
Hibernate: select addressent0_.id as id1_0_, addressent0_.cep as cep2_0_, addressent0_.city as city3_0_, addressent0_.main_address as main_add4_0_, addressent0_.neighborhood as neighbor5_0_, addressent0_.number as number6_0_, addressent0_.street as street7_0_, addressent0_.uf as uf8_0_ from address_entity addressent0_
Hibernate: delete from address_entity where id=?
]]></system-out>
  <system-err><![CDATA[]]></system-err>
</testsuite>
